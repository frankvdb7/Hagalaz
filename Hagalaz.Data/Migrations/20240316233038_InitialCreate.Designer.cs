// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Hagalaz.Data;

#nullable disable

namespace Hagalaz.Data.Migrations
{
    [DbContext(typeof(HagalazDbContext))]
    [Migration("20240316233038_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AspnetroleCharacter", b =>
                {
                    b.Property<uint>("RolesId")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("UsersId")
                        .HasColumnType("int(11) unsigned");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AspnetroleCharacter");
                });

            modelBuilder.Entity("ClansBan", b =>
                {
                    b.Property<uint>("ClanId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("clan_id");

                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.HasKey("ClanId", "MasterId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "MasterId" }, "master_id_foreign_key_18");

                    b.ToTable("clans_bans", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("GameobjectLootrecursion", b =>
                {
                    b.Property<ushort>("GameobjectLootChildId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("gameobject_loot_child_id");

                    b.Property<ushort>("GameobjectLootParentId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("gameobject_loot_parent_id");

                    b.HasKey("GameobjectLootChildId", "GameobjectLootParentId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "GameobjectLootParentId" }, "gameobject_loot_parent_id_foreign_key");

                    b.ToTable("gameobject_lootrecursion", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("ItemLootrecursion", b =>
                {
                    b.Property<ushort>("ItemLootChildId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_loot_child_id");

                    b.Property<ushort>("ItemLootParentId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_loot_parent_id");

                    b.HasKey("ItemLootChildId", "ItemLootParentId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ItemLootParentId" }, "item_loot_table_parent_id_foreign_key");

                    b.ToTable("item_lootrecursion", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("NpcLootrecursion", b =>
                {
                    b.Property<ushort>("NpcLootChildId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("npc_loot_child_id");

                    b.Property<ushort>("NpcLootParentId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("npc_loot_parent_id");

                    b.HasKey("NpcLootChildId", "NpcLootParentId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "NpcLootParentId" }, "npc_loot_parent_foreign_key");

                    b.ToTable("npc_lootrecursion", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("longtext");

                    b.Property<string>("ClientType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("longtext");

                    b.Property<string>("JsonWebKeySet")
                        .HasColumnType("longtext");

                    b.Property<string>("Permissions")
                        .HasColumnType("longtext");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("longtext");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("longtext");

                    b.Property<string>("Requirements")
                        .HasColumnType("longtext");

                    b.Property<string>("Settings")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext");

                    b.Property<string>("Scopes")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Descriptions")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext");

                    b.Property<string>("Resources")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Payload")
                        .HasColumnType("longtext");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", (string)null);
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Area", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ushort>("Id"));

                    b.Property<byte>("CannonAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("cannon_allowed")
                        .HasDefaultValueSql("'1'");

                    b.Property<byte>("FamiliarAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("familiar_allowed")
                        .HasDefaultValueSql("'1'");

                    b.Property<ushort>("MaximumDimension")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("maximum_dimension");

                    b.Property<short>("MaximumX")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("maximum_x");

                    b.Property<short>("MaximumY")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("maximum_y");

                    b.Property<byte>("MaximumZ")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("maximum_z");

                    b.Property<ushort>("MinimumDimension")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("minimum_dimension");

                    b.Property<short>("MinimumX")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("minimum_x");

                    b.Property<short>("MinimumY")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("minimum_y");

                    b.Property<byte>("MinimumZ")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("minimum_z");

                    b.Property<byte>("MulticombatAllowed")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("multicombat_allowed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.Property<byte>("PvpAllowed")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("pvp_allowed");

                    b.HasKey("Id");

                    b.ToTable("areas", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Aspnetrole", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("aspnetroles", (string)null);
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Aspnetroleclaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<uint>("RoleId")
                        .HasColumnType("int(11) unsigned");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("aspnetroleclaims", (string)null);
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Aspnetuserclaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<uint>("UserId")
                        .HasColumnType("int(11) unsigned");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("aspnetuserclaims", (string)null);
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Aspnetuserlogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<uint>("UserId")
                        .HasColumnType("int(11) unsigned");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("aspnetuserlogins", (string)null);
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Aspnetuserrole", b =>
                {
                    b.Property<uint>("UserId")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("RoleId")
                        .HasColumnType("int(11) unsigned");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("aspnetuserroles", (string)null);
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Aspnetusertoken", b =>
                {
                    b.Property<uint>("UserId")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("aspnetusertokens", (string)null);
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Blacklist", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<uint>("AppealId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("appeal_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ip_address")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("ModeratorId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("moderator_id");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AppealId" }, "appeal_id_foreign_key");

                    b.HasIndex(new[] { "ModeratorId" }, "moderator_id_foreign_key_2");

                    b.ToTable("blacklist", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Character", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int(11)");

                    b.Property<short>("Birthyear")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("birthyear");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<short>("CoordX")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasColumnName("coord_x")
                        .HasDefaultValueSql("'3100'");

                    b.Property<short>("CoordY")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasColumnName("coord_y")
                        .HasDefaultValueSql("'3499'");

                    b.Property<byte>("CoordZ")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("coord_z");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("display_name")
                        .HasDefaultValueSql("'#Player'");

                    b.Property<DateTime?>("DisplayNameLastChanged")
                        .HasColumnType("datetime")
                        .HasColumnName("display_name_last_changed");

                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email")
                        .HasDefaultValueSql("''");

                    b.Property<ulong>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<DateTimeOffset?>("LastGameLogin")
                        .HasColumnType("datetime")
                        .HasColumnName("last_game_login");

                    b.Property<string>("LastIp")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("last_ip");

                    b.Property<DateTimeOffset?>("LastLobbyLogin")
                        .HasColumnType("datetime")
                        .HasColumnName("last_lobby_login");

                    b.Property<ulong>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<ulong>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("PreviousDisplayName")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("previous_display_name");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime")
                        .HasColumnName("register_date");

                    b.Property<string>("RegisterIp")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("register_ip");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<ulong>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("username")
                        .HasDefaultValueSql("'#Player'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique();

                    b.HasIndex(new[] { "DisplayName" }, "display_name")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "master_id");

                    b.HasIndex(new[] { "Username" }, "username")
                        .IsUnique();

                    b.ToTable("characters", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersAppeal", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MasterId" }, "master_foreign_key");

                    b.ToTable("characters_appeals", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersContact", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<uint>("ContactId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("contact_id");

                    b.Property<sbyte>("FcRank")
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("fc_rank");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("type");

                    b.HasKey("MasterId", "ContactId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ContactId" }, "contact_id_foreign_key");

                    b.HasIndex(new[] { "MasterId" }, "master_id_foreign_key_14");

                    b.ToTable("characters_contacts", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersFamiliar", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<ushort>("FamiliarId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("familiar_id");

                    b.Property<ushort>("SpecialMovePoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("special_move_points")
                        .HasDefaultValueSql("'60'");

                    b.Property<uint>("TicksRemaining")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("ticks_remaining");

                    b.Property<byte>("UsingSpecialMove")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("using_special_move");

                    b.HasKey("MasterId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FamiliarId" }, "familiar_id_foreign_key");

                    b.ToTable("characters_familiars", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersFarmingPatch", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<uint>("PatchId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("patch_id");

                    b.Property<uint>("ConditionFlag")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("condition_flag");

                    b.Property<byte>("CurrentCycle")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("current_cycle");

                    b.Property<uint>("CurrentCycleTicks")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("current_cycle_ticks");

                    b.Property<uint>("ProductCount")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("product_count");

                    b.Property<ushort>("SeedId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("seed_id");

                    b.HasKey("MasterId", "PatchId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "PatchId" }, "farming_patch_foreign_key");

                    b.HasIndex(new[] { "SeedId" }, "seed_id_foreign_key");

                    b.ToTable("characters_farming_patches", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersItem", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<sbyte>("ContainerType")
                        .HasColumnType("tinyint")
                        .HasColumnName("container_type");

                    b.Property<int>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("count")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("ExtraData")
                        .HasColumnType("longtext")
                        .HasColumnName("extra_data")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ExtraData"), "utf8mb4");

                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("item_id");

                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<ushort>("SlotId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("slot_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MasterId" }, "master_id_foreign_key_15");

                    b.ToTable("characters_items", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersItemsLook", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("item_id");

                    b.Property<int>("FemaleWornModel1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("female_worn_model_1")
                        .HasDefaultValueSql("'-1'");

                    b.Property<int>("FemaleWornModel2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("female_worn_model_2")
                        .HasDefaultValueSql("'-1'");

                    b.Property<int>("FemaleWornModel3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("female_worn_model_3")
                        .HasDefaultValueSql("'-1'");

                    b.Property<int>("MaleWornModel1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("male_worn_model_1")
                        .HasDefaultValueSql("'-1'");

                    b.Property<int>("MaleWornModel2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("male_worn_model_2")
                        .HasDefaultValueSql("'-1'");

                    b.Property<int>("MaleWornModel3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("male_worn_model_3")
                        .HasDefaultValueSql("'-1'");

                    b.Property<string>("ModelColours")
                        .HasColumnType("longtext")
                        .HasColumnName("model_colours")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ModelColours"), "utf8mb4");

                    b.Property<string>("TextureColours")
                        .HasColumnType("longtext")
                        .HasColumnName("texture_colours")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TextureColours"), "utf8mb4");

                    b.HasKey("MasterId", "ItemId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("characters_items_look", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersLook", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<int>("ArmsLook")
                        .HasColumnType("int(10)")
                        .HasColumnName("arms_look");

                    b.Property<int>("BeardLook")
                        .HasColumnType("int(10)")
                        .HasColumnName("beard_look");

                    b.Property<byte>("DisplayTitle")
                        .HasColumnType("tinyint(4) unsigned")
                        .HasColumnName("display_title");

                    b.Property<short>("FeetColor")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("feet_color");

                    b.Property<int>("FeetLook")
                        .HasColumnType("int(10)")
                        .HasColumnName("feet_look");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("gender");

                    b.Property<short>("HairColor")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("hair_color");

                    b.Property<int>("HairLook")
                        .HasColumnType("int(10)")
                        .HasColumnName("hair_look");

                    b.Property<short>("LegColor")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("leg_color");

                    b.Property<int>("LegsLook")
                        .HasColumnType("int(10)")
                        .HasColumnName("legs_look");

                    b.Property<short>("SkinColor")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("skin_color");

                    b.Property<short>("TorsoColor")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("torso_color");

                    b.Property<int>("TorsoLook")
                        .HasColumnType("int(10)")
                        .HasColumnName("torso_look");

                    b.Property<int>("WristLook")
                        .HasColumnType("int(10)")
                        .HasColumnName("wrist_look");

                    b.HasKey("MasterId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MasterId" }, "LOOK_MASTER_ID_FOREIGN");

                    b.ToTable("characters_look", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersMusic", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<string>("UnlockedMusic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("unlocked_music");

                    b.HasKey("MasterId")
                        .HasName("PRIMARY");

                    b.ToTable("characters_music", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersMusicPlaylist", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<string>("Playlist")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(56)
                        .HasColumnType("varchar(56)")
                        .HasColumnName("playlist")
                        .HasDefaultValueSql("''");

                    b.Property<byte>("PlaylistToggled")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("playlist_toggled");

                    b.Property<byte>("ShuffleToggled")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("shuffle_toggled");

                    b.HasKey("MasterId")
                        .HasName("PRIMARY");

                    b.ToTable("characters_music_playlists", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersNote", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<byte>("NoteId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("note_id");

                    b.Property<byte>("Colour")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("colour");

                    b.Property<string>("Text")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("text")
                        .HasDefaultValueSql("''");

                    b.HasKey("MasterId", "NoteId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("characters_notes", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersOffence", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<uint>("AppealId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("appeal_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expire_date");

                    b.Property<byte>("Expired")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("expired");

                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<uint>("ModeratorId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("moderator_id");

                    b.Property<byte>("OffenceType")
                        .HasColumnType("tinyint(4) unsigned")
                        .HasColumnName("offence_type");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MasterId" }, "master_id_foreign_key_5");

                    b.HasIndex(new[] { "ModeratorId" }, "moderator_id_foreign_key");

                    b.ToTable("characters_offences", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersPermission", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<string>("Permission")
                        .HasColumnType("enum('SystemAdministrator','GameAdministrator','GameModerator','Donator')")
                        .HasColumnName("permission")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Permission"), "utf8mb4");

                    b.HasKey("MasterId", "Permission")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("characters_permissions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersPreference", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<byte>("AcceptAid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("accept_aid")
                        .HasDefaultValueSql("'1'");

                    b.Property<byte>("AssistFilter")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("assist_filter");

                    b.Property<byte>("AttackStyleOptionId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("attack_style_option_id");

                    b.Property<byte>("AutoRetaliating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("auto_retaliating")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("BankTabs")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("bank_tabs")
                        .HasDefaultValueSql("'0,0,0,0,0,0,0,0'");

                    b.Property<int>("Bankx")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("bankx")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("CcLastEntered")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cc_last_entered")
                        .HasDefaultValueSql("''");

                    b.Property<byte>("ChatEffects")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("chat_effects")
                        .HasDefaultValueSql("'1'");

                    b.Property<byte>("ClanFilter")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("clan_filter");

                    b.Property<byte>("DefensiveCasting")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("defensive_casting");

                    b.Property<string>("FcLastEntered")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("fc_last_entered")
                        .HasDefaultValueSql("''");

                    b.Property<byte>("FcLootShare")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("fc_loot_share");

                    b.Property<string>("FcName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("fc_name")
                        .HasDefaultValueSql("''");

                    b.Property<sbyte>("FcRankEnter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("fc_rank_enter")
                        .HasDefaultValueSql("'-1'");

                    b.Property<sbyte>("FcRankKick")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("fc_rank_kick")
                        .HasDefaultValueSql("'7'");

                    b.Property<sbyte>("FcRankLoot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("fc_rank_loot")
                        .HasDefaultValueSql("'-2'");

                    b.Property<sbyte>("FcRankTalk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("fc_rank_talk")
                        .HasDefaultValueSql("'-1'");

                    b.Property<byte>("FilterProfanity")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("filter_profanity");

                    b.Property<byte>("FriendsFilter")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("friends_filter");

                    b.Property<byte>("GameFilter")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("game_filter");

                    b.Property<string>("GuestCcLastEntered")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("guest_cc_last_entered")
                        .HasDefaultValueSql("''");

                    b.Property<byte>("HideCombatSpells")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("hide_combat_spells");

                    b.Property<byte>("HideMiscSpells")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("hide_misc_spells");

                    b.Property<byte>("HideSkillSpells")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("hide_skill_spells");

                    b.Property<byte>("HideTeleportSpells")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("hide_teleport_spells");

                    b.Property<ushort>("MagicBook")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("magic_book")
                        .HasDefaultValueSql("'192'");

                    b.Property<byte>("MoneyPouchDisplay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("money_pouch_display")
                        .HasDefaultValueSql("'1'");

                    b.Property<byte>("PmAvailability")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("pm_availability");

                    b.Property<byte>("PrayerBook")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("prayer_book");

                    b.Property<byte>("PublicFilter")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("public_filter");

                    b.Property<string>("QuickPrayers")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("quick_prayers")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("RightClickReporting")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("right_click_reporting");

                    b.Property<byte>("Running")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("running");

                    b.Property<byte>("SingleMouse")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("single_mouse");

                    b.Property<byte>("SplitChat")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("split_chat");

                    b.Property<byte>("SumLeftClickOption")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("sum_left_click_option");

                    b.Property<byte>("TradeFilter")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("trade_filter");

                    b.Property<byte>("XpCounterDisplay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("xp_counter_display")
                        .HasDefaultValueSql("'1'");

                    b.Property<byte>("XpCounterPopup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("xp_counter_popup")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("MasterId")
                        .HasName("PRIMARY");

                    b.ToTable("characters_preferences", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersProfile", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("data");

                    b.HasKey("MasterId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MasterId" }, "master_foreign_key")
                        .HasDatabaseName("master_foreign_key1");

                    b.ToTable("characters_profiles", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersQuest", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<ushort>("QuestId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("quest_id");

                    b.Property<ushort>("Stage")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("stage");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("status");

                    b.HasKey("MasterId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "QuestId" }, "quest_id_foreign_key");

                    b.ToTable("characters_quests", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersReport", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<uint>("ReportedId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("reported_id");

                    b.Property<uint>("ReporterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("reporter_id");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint(4) unsigned")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ReportedId" }, "reported_id_foreign_key");

                    b.HasIndex(new[] { "ReporterId" }, "reporter_id_foreign_key");

                    b.ToTable("characters_reports", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersReward", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<int>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("count")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("ExtraData")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("extra_data")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ExtraData"), "utf8mb4");

                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("item_id");

                    b.Property<byte>("Loaded")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("loaded");

                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MasterId" }, "master_id_foreign_key_10");

                    b.ToTable("characters_rewards", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersSlayerTask", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<uint>("KillCount")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("kill_count");

                    b.Property<ushort>("SlayerTaskId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("slayer_task_id");

                    b.HasKey("MasterId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SlayerTaskId" }, "slayer_task_id_foreign_key");

                    b.ToTable("characters_slayer_tasks", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersState", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<int>("StateId")
                        .HasColumnType("int(11)")
                        .HasColumnName("state_id");

                    b.Property<int>("TicksLeft")
                        .HasColumnType("int(11)")
                        .HasColumnName("ticks_left");

                    b.HasKey("MasterId", "StateId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("characters_states", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersStatistic", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<int>("AgilityExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("agility_exp");

                    b.Property<byte>("AgilityLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("agility_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("AttackExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("attack_exp");

                    b.Property<byte>("AttackLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("attack_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("ConstitutionExp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("constitution_exp")
                        .HasDefaultValueSql("'1154'");

                    b.Property<byte>("ConstitutionLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("constitution_level")
                        .HasDefaultValueSql("'10'");

                    b.Property<int>("ConstructionExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("construction_exp");

                    b.Property<byte>("ConstructionLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("construction_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("CookingExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("cooking_exp");

                    b.Property<byte>("CookingLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("cooking_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("CraftingExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("crafting_exp");

                    b.Property<byte>("CraftingLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("crafting_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("DefenceExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("defence_exp");

                    b.Property<byte>("DefenceLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("defence_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("DungeoneeringExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("dungeoneering_exp");

                    b.Property<byte>("DungeoneeringLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("dungeoneering_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("EnabledXpCounters")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("enabled_xp_counters")
                        .HasDefaultValueSql("'1,0,0'");

                    b.Property<int>("FarmingExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("farming_exp");

                    b.Property<byte>("FarmingLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("farming_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("FiremakingExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("firemaking_exp");

                    b.Property<byte>("FiremakingLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("firemaking_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("FishingExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("fishing_exp");

                    b.Property<byte>("FishingLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("fishing_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("FletchingExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("fletching_exp");

                    b.Property<byte>("FletchingLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("fletching_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("HerbloreExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("herblore_exp");

                    b.Property<byte>("HerbloreLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("herblore_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("HunterExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("hunter_exp");

                    b.Property<byte>("HunterLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("hunter_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<ushort>("LifePoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("life_points")
                        .HasDefaultValueSql("'100'");

                    b.Property<int>("MagicExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("magic_exp");

                    b.Property<byte>("MagicLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("magic_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MiningExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("mining_exp");

                    b.Property<byte>("MiningLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("mining_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<ulong>("PlayTime")
                        .HasColumnType("bigint(19) unsigned")
                        .HasColumnName("play_time");

                    b.Property<ushort>("PoisonAmount")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("poison_amount");

                    b.Property<int>("PrayerExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("prayer_exp");

                    b.Property<byte>("PrayerLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("prayer_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<ushort>("PrayerPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("prayer_points")
                        .HasDefaultValueSql("'100'");

                    b.Property<int>("RangeExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("range_exp");

                    b.Property<byte>("RangeLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("range_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<byte>("RunEnergy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(6) unsigned")
                        .HasColumnName("run_energy")
                        .HasDefaultValueSql("'100'");

                    b.Property<int>("RunecraftingExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("runecrafting_exp");

                    b.Property<byte>("RunecraftingLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("runecrafting_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("SlayerExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("slayer_exp");

                    b.Property<byte>("SlayerLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("slayer_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("SmithingExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("smithing_exp");

                    b.Property<byte>("SmithingLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("smithing_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<ushort>("SpecialEnergy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("special_energy")
                        .HasDefaultValueSql("'1000'");

                    b.Property<int>("StrengthExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("strength_exp");

                    b.Property<byte>("StrengthLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("strength_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("SummoningExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("summoning_exp");

                    b.Property<byte>("SummoningLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("summoning_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("TargetSkillExperiences")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(312)
                        .HasColumnType("varchar(312)")
                        .HasColumnName("target_skill_experiences")
                        .HasDefaultValueSql("'-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1'");

                    b.Property<string>("TargetSkillLevels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("target_skill_levels")
                        .HasDefaultValueSql("'-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1'");

                    b.Property<int>("ThievingExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("thieving_exp");

                    b.Property<byte>("ThievingLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("thieving_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("TrackedXpCounters")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("tracked_xp_counters")
                        .HasDefaultValueSql("'30,0,0'");

                    b.Property<int>("WoodcuttingExp")
                        .HasColumnType("int(11)")
                        .HasColumnName("woodcutting_exp");

                    b.Property<byte>("WoodcuttingLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("woodcutting_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("XpCounters")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(72)
                        .HasColumnType("varchar(72)")
                        .HasColumnName("xp_counters")
                        .HasDefaultValueSql("'0,0,0'");

                    b.HasKey("MasterId")
                        .HasName("PRIMARY");

                    b.ToTable("characters_statistics", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersTicket", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<byte>("Completed")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("completed");

                    b.Property<uint>("MasterId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("master_id");

                    b.Property<uint>("ModeratorId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("moderator_id");

                    b.Property<string>("ResponseText")
                        .HasColumnType("longtext")
                        .HasColumnName("response_text")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ResponseText"), "utf8mb4");

                    b.Property<DateTime>("TicketLastchange")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("ticket_lastchange")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("TicketLastchange"));

                    b.Property<string>("TicketText")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ticket_text")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TicketText"), "utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("characters_tickets", null, t =>
                        {
                            t.HasComment("Player System");
                        });
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersVariable", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("master_id");

                    b.Property<string>("Variable")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("variable");

                    b.Property<int?>("IntValue")
                        .HasColumnType("int")
                        .HasColumnName("int_value");

                    b.Property<string>("StringValue")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("string_value")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("StringValue"), "utf8mb4");

                    b.HasKey("MasterId", "Variable")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("characters_variables", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharacterscreateinfoItem", b =>
                {
                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_id");

                    b.Property<byte>("ContainerType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("container_type")
                        .HasDefaultValueSql("'2'");

                    b.Property<int>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("count")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("ItemId", "ContainerType")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("characterscreateinfo_items", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Clan", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("creation_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.HasKey("Id");

                    b.ToTable("clans", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.ClansMember", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<uint>("ClanId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("clan_id");

                    b.Property<sbyte>("Rank")
                        .HasColumnType("tinyint")
                        .HasColumnName("rank");

                    b.Property<uint?>("RecruiterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("recruiter_id");

                    b.HasKey("MasterId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClanId" }, "clan_id_foreign_key_46");

                    b.HasIndex(new[] { "RecruiterId" }, "recruiter_id_foreign_key");

                    b.ToTable("clans_members", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.ClansSetting", b =>
                {
                    b.Property<uint>("ClanId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("clan_id");

                    b.Property<byte>("ClanTime")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("clan_time");

                    b.Property<byte>("MottifBottom")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("mottif_bottom");

                    b.Property<short>("MottifColourLeftTop")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasColumnName("mottif_colour_left_top")
                        .HasDefaultValueSql("'-1'");

                    b.Property<short>("MottifColourRightBottom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasColumnName("mottif_colour_right_bottom")
                        .HasDefaultValueSql("'-1'");

                    b.Property<byte>("MottifTop")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("mottif_top");

                    b.Property<string>("Motto")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("motto");

                    b.Property<byte>("NationalFlag")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("national_flag");

                    b.Property<short>("PrimaryClanColour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasColumnName("primary_clan_colour")
                        .HasDefaultValueSql("'-1'");

                    b.Property<sbyte>("RankToEnterCc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("rank_to_enter_cc")
                        .HasDefaultValueSql("'-1'");

                    b.Property<sbyte>("RankToKick")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("rank_to_kick")
                        .HasDefaultValueSql("'100'");

                    b.Property<sbyte>("RankToTalk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("rank_to_talk")
                        .HasDefaultValueSql("'-1'");

                    b.Property<byte>("Recruiting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("recruiting")
                        .HasDefaultValueSql("'1'");

                    b.Property<short>("SecondaryClanColour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasColumnName("secondary_clan_colour")
                        .HasDefaultValueSql("'-1'");

                    b.Property<string>("ThreadId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("thread_id");

                    b.Property<short>("TimeZone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasColumnName("time_zone")
                        .HasDefaultValueSql("'-1'");

                    b.Property<ushort>("WorldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("world_id")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("ClanId")
                        .HasName("PRIMARY");

                    b.ToTable("clans_settings", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Configuration", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("value");

                    b.HasKey("Name")
                        .HasName("PRIMARY");

                    b.ToTable("configurations", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Efmigrationshistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__efmigrationshistory", (string)null);
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.EquipmentBonuse", b =>
                {
                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_id");

                    b.Property<int>("AbsorbMagic")
                        .HasColumnType("int(32)")
                        .HasColumnName("absorb_magic");

                    b.Property<int>("AbsorbMelee")
                        .HasColumnType("int(32)")
                        .HasColumnName("absorb_melee");

                    b.Property<int>("AbsorbRange")
                        .HasColumnType("int(32)")
                        .HasColumnName("absorb_range");

                    b.Property<int>("AttackCrush")
                        .HasColumnType("int(32)")
                        .HasColumnName("attack_crush");

                    b.Property<int>("AttackMagic")
                        .HasColumnType("int(32)")
                        .HasColumnName("attack_magic");

                    b.Property<int>("AttackRanged")
                        .HasColumnType("int(32)")
                        .HasColumnName("attack_ranged");

                    b.Property<int>("AttackSlash")
                        .HasColumnType("int(32)")
                        .HasColumnName("attack_slash");

                    b.Property<int>("AttackStab")
                        .HasColumnType("int(32)")
                        .HasColumnName("attack_stab");

                    b.Property<int>("DefenceCrush")
                        .HasColumnType("int(32)")
                        .HasColumnName("defence_crush");

                    b.Property<int>("DefenceMagic")
                        .HasColumnType("int(32)")
                        .HasColumnName("defence_magic");

                    b.Property<int>("DefenceRanged")
                        .HasColumnType("int(32)")
                        .HasColumnName("defence_ranged");

                    b.Property<int>("DefenceSlash")
                        .HasColumnType("int(32)")
                        .HasColumnName("defence_slash");

                    b.Property<int>("DefenceStab")
                        .HasColumnType("int(32)")
                        .HasColumnName("defence_stab");

                    b.Property<int>("DefenceSummoning")
                        .HasColumnType("int(32)")
                        .HasColumnName("defence_summoning");

                    b.Property<int>("MagicDamage")
                        .HasColumnType("int(32)")
                        .HasColumnName("magic_damage");

                    b.Property<int>("Prayer")
                        .HasColumnType("int(32)")
                        .HasColumnName("prayer");

                    b.Property<int>("RangedStrength")
                        .HasColumnType("int(32)")
                        .HasColumnName("ranged_strength");

                    b.Property<int>("Strength")
                        .HasColumnType("int(32)")
                        .HasColumnName("strength");

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.ToTable("equipment_bonuses", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.EquipmentDefinition", b =>
                {
                    b.Property<ushort>("Id")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("id");

                    b.Property<short>("AttackDistance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("attack_distance")
                        .HasDefaultValueSql("'1'");

                    b.Property<short>("Attackanim1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("attackanim1")
                        .HasDefaultValueSql("'-1'");

                    b.Property<short>("Attackanim2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("attackanim2")
                        .HasDefaultValueSql("'-1'");

                    b.Property<short>("Attackanim3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("attackanim3")
                        .HasDefaultValueSql("'-1'");

                    b.Property<short>("Attackanim4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("attackanim4")
                        .HasDefaultValueSql("'-1'");

                    b.Property<short>("Attackgfx1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("attackgfx1")
                        .HasDefaultValueSql("'-1'");

                    b.Property<short>("Attackgfx2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("attackgfx2")
                        .HasDefaultValueSql("'-1'");

                    b.Property<short>("Attackgfx3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("attackgfx3")
                        .HasDefaultValueSql("'-1'");

                    b.Property<short>("Attackgfx4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("attackgfx4")
                        .HasDefaultValueSql("'-1'");

                    b.Property<short>("DefenceAnim")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("defence_anim")
                        .HasDefaultValueSql("'-1'");

                    b.Property<string>("Fullbody")
                        .HasColumnType("enum('false','true')")
                        .HasColumnName("fullbody")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Fullbody"), "utf8mb4");

                    b.Property<string>("Fullhat")
                        .HasColumnType("enum('false','true')")
                        .HasColumnName("fullhat")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Fullhat"), "utf8mb4");

                    b.Property<string>("Fullmask")
                        .HasColumnType("enum('false','true')")
                        .HasColumnName("fullmask")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Fullmask"), "utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''")
                        .HasComment("This field is updated automatically by the server.");

                    b.HasKey("Id");

                    b.ToTable("equipment_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.GameEvent", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ushort>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("end_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.ToTable("game_events", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.GameobjectDefinition", b =>
                {
                    b.Property<uint>("GameobjectId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("gameobject_id");

                    b.Property<string>("Examine")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("examine");

                    b.Property<ushort?>("GameobjectLootId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("gameobject_loot_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("'unknown'");

                    b.HasKey("GameobjectId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GameobjectLootId" }, "gameobject_loot_id_foreign_key");

                    b.ToTable("gameobject_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.GameobjectLodestone", b =>
                {
                    b.Property<uint>("GameobjectId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("gameobject_id");

                    b.Property<ushort>("ButtonId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("button_id");

                    b.Property<ushort>("CoordX")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("coord_x");

                    b.Property<ushort>("CoordY")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("coord_y");

                    b.Property<byte>("CoordZ")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("coord_z");

                    b.Property<uint>("StateId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("state_id");

                    b.HasKey("GameobjectId")
                        .HasName("PRIMARY");

                    b.ToTable("gameobject_lodestones", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.GameobjectLoot", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ushort>("Id"));

                    b.Property<uint>("MaximumLootCount")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("maximum_loot_count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name");

                    b.Property<byte>("RandomizeLootCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("randomize_loot_count")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.ToTable("gameobject_loot", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.GameobjectLootItem", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<byte>("Always")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("always");

                    b.Property<ushort>("GameobjectLootId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("gameobject_loot_id");

                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_id");

                    b.Property<uint>("MaximumCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("maximum_count")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("MinimumCount")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("minimum_count");

                    b.Property<decimal>("Probability")
                        .HasPrecision(8, 3)
                        .HasColumnType("decimal(8,3)")
                        .HasColumnName("probability");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GameobjectLootId" }, "gameobject_loot_id_foreign_key_1");

                    b.ToTable("gameobject_loot_items", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.GameobjectSpawn", b =>
                {
                    b.Property<int>("SpawnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("spawn_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SpawnId"));

                    b.Property<short>("CoordX")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasColumnName("coord_x")
                        .HasDefaultValueSql("'3200'");

                    b.Property<short>("CoordY")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasColumnName("coord_y")
                        .HasDefaultValueSql("'3200'");

                    b.Property<ushort>("CoordZ")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("coord_z");

                    b.Property<short>("Face")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("face");

                    b.Property<uint>("GameobjectId")
                        .HasColumnType("int(8) unsigned")
                        .HasColumnName("gameobject_id");

                    b.Property<short>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(11)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'10'");

                    b.HasKey("SpawnId")
                        .HasName("PRIMARY");

                    b.ToTable("gameobject_spawns", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.ItemCombine", b =>
                {
                    b.Property<ushort>("ReqItemId1")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("req_item_id_1");

                    b.Property<ushort>("AnimId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("anim_id");

                    b.Property<ushort>("GraphicId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("graphic_id");

                    b.Property<uint>("ReqItemCount1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("req_item_count_1")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("ReqItemCount2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("req_item_count_2")
                        .HasDefaultValueSql("'1'");

                    b.Property<ushort>("ReqItemId2")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("req_item_id_2");

                    b.Property<byte>("ReqSkillCount1")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("req_skill_count_1");

                    b.Property<byte>("ReqSkillCount2")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("req_skill_count_2");

                    b.Property<byte>("ReqSkillCount3")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("req_skill_count_3");

                    b.Property<sbyte>("ReqSkillId1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("req_skill_id_1")
                        .HasDefaultValueSql("'-1'");

                    b.Property<sbyte>("ReqSkillId2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("req_skill_id_2")
                        .HasDefaultValueSql("'-1'");

                    b.Property<sbyte>("ReqSkillId3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("req_skill_id_3")
                        .HasDefaultValueSql("'-1'");

                    b.Property<uint>("RewItemCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("rew_item_count")
                        .HasDefaultValueSql("'1'");

                    b.Property<ushort>("RewItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("rew_item_id");

                    b.Property<decimal>("RewSkillExp1")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("rew_skill_exp_1");

                    b.Property<decimal>("RewSkillExp2")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("rew_skill_exp_2");

                    b.Property<decimal>("RewSkillExp3")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("rew_skill_exp_3");

                    b.Property<sbyte>("RewSkillId1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("rew_skill_id_1")
                        .HasDefaultValueSql("'-1'");

                    b.Property<sbyte>("RewSkillId2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("rew_skill_id_2")
                        .HasDefaultValueSql("'-1'");

                    b.Property<sbyte>("RewSkillId3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("rew_skill_id_3")
                        .HasDefaultValueSql("'-1'");

                    b.HasKey("ReqItemId1")
                        .HasName("PRIMARY");

                    b.ToTable("item_combines", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.ItemDefinition", b =>
                {
                    b.Property<ushort>("Id")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Examine")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("examine");

                    b.Property<int>("HighAlchemyValue")
                        .HasColumnType("int(10)")
                        .HasColumnName("high_alchemy_value");

                    b.Property<int>("LowAlchemyValue")
                        .HasColumnType("int(10)")
                        .HasColumnName("low_alchemy_value");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("'unknown'");

                    b.Property<int>("TradePrice")
                        .HasColumnType("int(10)")
                        .HasColumnName("trade_price");

                    b.Property<byte>("Tradeable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("tradeable")
                        .HasDefaultValueSql("'1'");

                    b.Property<decimal>("Weight")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.ToTable("item_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.ItemLoot", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ushort>("Id"));

                    b.Property<uint>("MaximumLootCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("maximum_loot_count")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)")
                        .HasColumnName("name");

                    b.Property<byte>("RandomizeLootCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("randomize_loot_count")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.ToTable("item_loot", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.ItemLootItem", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<byte>("Always")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("always");

                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_id");

                    b.Property<ushort>("ItemLootId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_loot_id");

                    b.Property<uint>("MaximumCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("maximum_count")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("MinimumCount")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("minimum_count");

                    b.Property<decimal>("Probability")
                        .HasPrecision(8, 3)
                        .HasColumnType("decimal(8,3)")
                        .HasColumnName("probability");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ItemLootId" }, "item_loot_id_foreign_key");

                    b.ToTable("item_loot_items", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.ItemSpawn", b =>
                {
                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("item_id");

                    b.Property<short>("CoordX")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("coord_x")
                        .HasDefaultValueSql("'3200'");

                    b.Property<short>("CoordY")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("coord_y")
                        .HasDefaultValueSql("'3200'");

                    b.Property<byte>("CoordZ")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("coord_z");

                    b.Property<int>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("count")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("RespawnTicks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("respawn_ticks")
                        .HasDefaultValueSql("'100'");

                    b.HasKey("ItemId", "CoordX", "CoordY", "CoordZ")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                    b.ToTable("item_spawns", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.LogsActivity", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(19) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<string>("FullDesc")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasColumnName("full_desc");

                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasColumnName("short_desc");

                    b.HasKey("Id");

                    b.ToTable("logs_activities", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.LogsChat", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(19) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("message");

                    b.Property<uint>("ReceiverId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("receiver_id");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint(4) unsigned")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("logs_chat", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.LogsConnection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Port")
                        .HasColumnType("int")
                        .HasColumnName("port");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ip")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Ip"), "utf8mb4");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime")
                        .HasColumnName("time");

                    b.HasKey("Id", "Port")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("logs_connections", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.LogsDisplayNameChange", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(19) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<DateTime>("DateChanged")
                        .HasColumnType("datetime")
                        .HasColumnName("date_changed");

                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<string>("NewDisplayName")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("new_display_name");

                    b.Property<string>("PreviousDisplayName")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("previous_display_name");

                    b.HasKey("Id");

                    b.ToTable("logs_display_name_changes", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.LogsLoginAttempt", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(19) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<sbyte>("Attempt")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("attempt");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ip");

                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<sbyte>("Type")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("logs_login_attempts", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.MinigamesBarrow", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<byte>("BrotherKilled0")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("brother_killed_0");

                    b.Property<byte>("BrotherKilled1")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("brother_killed_1");

                    b.Property<byte>("BrotherKilled2")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("brother_killed_2");

                    b.Property<byte>("BrotherKilled3")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("brother_killed_3");

                    b.Property<byte>("BrotherKilled4")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("brother_killed_4");

                    b.Property<byte>("BrotherKilled5")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("brother_killed_5");

                    b.Property<byte>("BrotherKilled6")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("brother_killed_6");

                    b.Property<byte>("CryptStartIndex")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("crypt_start_index");

                    b.Property<int>("KillCount")
                        .HasColumnType("int(11)")
                        .HasColumnName("kill_count");

                    b.Property<byte>("LootedChest")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("looted_chest");

                    b.Property<byte>("TunnelIndex")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("tunnel_index");

                    b.HasKey("MasterId")
                        .HasName("PRIMARY");

                    b.ToTable("minigames_barrows", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.MinigamesDuelArena", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<string>("FavouriteRules")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("favourite_rules");

                    b.Property<string>("PreviousRules")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("previous_rules");

                    b.HasKey("MasterId")
                        .HasName("PRIMARY");

                    b.ToTable("minigames_duel_arena", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.MinigamesGodwar", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<short>("ArmadylKillCount")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("armadyl_kill_count");

                    b.Property<short>("BandosKillCount")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("bandos_kill_count");

                    b.Property<short>("SaradominKillCount")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("saradomin_kill_count");

                    b.Property<short>("ZamorakKillCount")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("zamorak_kill_count");

                    b.HasKey("MasterId")
                        .HasName("PRIMARY");

                    b.ToTable("minigames_godwars", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.MinigamesTzhaarCave", b =>
                {
                    b.Property<uint>("MasterId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("master_id");

                    b.Property<uint>("CurrentWaveId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("current_wave_id");

                    b.HasKey("MasterId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CurrentWaveId" }, "current_wave_id_foreign_key");

                    b.ToTable("minigames_tzhaar_cave", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.MinigamesTzhaarCaveWave", b =>
                {
                    b.Property<uint>("WaveId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("wave_id");

                    b.Property<ushort>("NpcId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("npc_id");

                    b.Property<int>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("count")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("WaveId", "NpcId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "WaveId" }, "wave_id");

                    b.ToTable("minigames_tzhaar_cave_waves", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.MusicDefinition", b =>
                {
                    b.Property<ushort>("Id")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Hint")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("hint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("music_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.MusicLocation", b =>
                {
                    b.Property<ushort>("MusicId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("music_id");

                    b.Property<uint>("RegionId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("region_id");

                    b.HasKey("MusicId", "RegionId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("music_locations", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.NpcBonuse", b =>
                {
                    b.Property<ushort>("NpcId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("npc_id");

                    b.Property<short>("AbsorbMagic")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("absorb_magic");

                    b.Property<short>("AbsorbMelee")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("absorb_melee");

                    b.Property<short>("AbsorbRange")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("absorb_range");

                    b.Property<short>("AttackCrush")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("attack_crush");

                    b.Property<short>("AttackMagic")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("attack_magic");

                    b.Property<short>("AttackRanged")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("attack_ranged");

                    b.Property<short>("AttackSlash")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("attack_slash");

                    b.Property<short>("AttackStab")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("attack_stab");

                    b.Property<short>("DefenceCrush")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("defence_crush");

                    b.Property<short>("DefenceMagic")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("defence_magic");

                    b.Property<short>("DefenceRanged")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("defence_ranged");

                    b.Property<short>("DefenceSlash")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("defence_slash");

                    b.Property<short>("DefenceStab")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("defence_stab");

                    b.Property<short>("DefenceSummoning")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("defence_summoning");

                    b.Property<short>("Magic")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("magic");

                    b.Property<short>("Prayer")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("prayer");

                    b.Property<short>("RangedStrength")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("ranged_strength");

                    b.Property<short>("Strength")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("strength");

                    b.HasKey("NpcId")
                        .HasName("PRIMARY");

                    b.ToTable("npc_bonuses", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.NpcDefinition", b =>
                {
                    b.Property<ushort>("NpcId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("npc_id");

                    b.Property<short>("AttackAnimation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("attack_animation")
                        .HasDefaultValueSql("'422'");

                    b.Property<short>("AttackGraphic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("attack_graphic")
                        .HasDefaultValueSql("'-1'");

                    b.Property<uint>("AttackSpeed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("attack_speed")
                        .HasDefaultValueSql("'8'");

                    b.Property<byte>("Attackable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("attackable")
                        .HasDefaultValueSql("'1'");

                    b.Property<byte>("BoundsType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("bounds_type")
                        .HasDefaultValueSql("'1'");

                    b.Property<ushort>("CombatLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("combat_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<short>("DeathAnimation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("death_animation")
                        .HasDefaultValueSql("'7197'");

                    b.Property<short>("DeathGraphic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("death_graphic")
                        .HasDefaultValueSql("'-1'");

                    b.Property<byte>("DeathTicks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("death_ticks")
                        .HasDefaultValueSql("'7'");

                    b.Property<short>("DefenceAnimation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("defence_animation")
                        .HasDefaultValueSql("'404'");

                    b.Property<short>("DefenceGraphic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("defence_graphic")
                        .HasDefaultValueSql("'-1'");

                    b.Property<string>("Examine")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("examine")
                        .HasDefaultValueSql("'It''s an npc.'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("'unknown'");

                    b.Property<ushort?>("NpcLootId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("npc_loot_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<ushort?>("NpcPickpocketingLootId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("npc_pickpocketing_loot_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("ReactionType")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("reaction_type");

                    b.Property<uint>("RespawnTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("respawn_time")
                        .HasDefaultValueSql("'100'");

                    b.Property<byte>("SlayerLevelRequired")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("slayer_level_required");

                    b.Property<byte>("WalksRandomly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("walks_randomly")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("NpcId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "NpcLootId" }, "npc_loot_id_foreign_key");

                    b.HasIndex(new[] { "NpcPickpocketingLootId" }, "npc_pickpocket_loot_id_foreign_key");

                    b.ToTable("npc_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.NpcLoot", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ushort>("Id"));

                    b.Property<byte>("Always")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("always");

                    b.Property<int>("MaximumLootCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("maximum_loot_count")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.Property<byte>("RandomizeLootCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("randomize_loot_count")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.ToTable("npc_loot", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.NpcLootItem", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<byte>("Always")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("always");

                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_id");

                    b.Property<uint>("MaximumCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("maximum_count")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("MinimumCount")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("minimum_count");

                    b.Property<ushort>("NpcLootId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("npc_loot_id");

                    b.Property<decimal>("Probability")
                        .HasPrecision(8, 3)
                        .HasColumnType("decimal(8,3)")
                        .HasColumnName("probability");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NpcLootId" }, "npc_loot_id_foreign_key_1");

                    b.ToTable("npc_loot_items", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.NpcSpawn", b =>
                {
                    b.Property<uint>("SpawnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("spawn_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("SpawnId"));

                    b.Property<short>("CoordX")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("coord_x")
                        .HasDefaultValueSql("'3222'");

                    b.Property<short>("CoordY")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("coord_y")
                        .HasDefaultValueSql("'3222'");

                    b.Property<byte>("CoordZ")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("coord_z");

                    b.Property<short>("MaxCoordX")
                        .HasColumnType("smallint")
                        .HasColumnName("max_coord_x");

                    b.Property<short>("MaxCoordY")
                        .HasColumnType("smallint")
                        .HasColumnName("max_coord_y");

                    b.Property<byte>("MaxCoordZ")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("max_coord_z");

                    b.Property<short>("MinCoordX")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("min_coord_x")
                        .HasDefaultValueSql("'3200'");

                    b.Property<short>("MinCoordY")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("min_coord_y")
                        .HasDefaultValueSql("'3200'");

                    b.Property<byte>("MinCoordZ")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("min_coord_z");

                    b.Property<ushort>("NpcId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("npc_id");

                    b.Property<sbyte?>("SpawnDirection")
                        .HasColumnType("tinyint")
                        .HasColumnName("spawn_direction");

                    b.HasKey("SpawnId")
                        .HasName("PRIMARY");

                    b.ToTable("npc_spawns", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.NpcStatistic", b =>
                {
                    b.Property<ushort>("NpcId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("npc_id");

                    b.Property<ushort>("AttackLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(8) unsigned")
                        .HasColumnName("attack_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<ushort>("DefenceLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(8) unsigned")
                        .HasColumnName("defence_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<ushort>("MagicLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(8) unsigned")
                        .HasColumnName("magic_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<ushort>("MaxLifepoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(8) unsigned")
                        .HasColumnName("max_lifepoints")
                        .HasDefaultValueSql("'10'");

                    b.Property<ushort>("RangedLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(8) unsigned")
                        .HasColumnName("ranged_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<ushort>("StrengthLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(8) unsigned")
                        .HasColumnName("strength_level")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("NpcId")
                        .HasName("PRIMARY");

                    b.ToTable("npc_statistics", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.ProfanityWord", b =>
                {
                    b.Property<string>("Word")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("word");

                    b.HasKey("Word")
                        .HasName("PRIMARY");

                    b.ToTable("profanity_words", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Quest", b =>
                {
                    b.Property<ushort>("Id")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("id");

                    b.Property<byte>("MinSkillCount1")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("min_skill_count_1");

                    b.Property<byte>("MinSkillCount2")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("min_skill_count_2");

                    b.Property<byte>("MinSkillCount3")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("min_skill_count_3");

                    b.Property<byte>("MinSkillCount4")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("min_skill_count_4");

                    b.Property<byte>("MinSkillId1")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("min_skill_id_1");

                    b.Property<byte>("MinSkillId2")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("min_skill_id_2");

                    b.Property<byte>("MinSkillId3")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("min_skill_id_3");

                    b.Property<byte>("MinSkillId4")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("min_skill_id_4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("ReqItemCount1")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("req_item_count_1");

                    b.Property<uint>("ReqItemCount2")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("req_item_count_2");

                    b.Property<uint>("ReqItemCount3")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("req_item_count_3");

                    b.Property<uint>("ReqItemCount4")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("req_item_count_4");

                    b.Property<ushort>("ReqItemId1")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("req_item_id_1");

                    b.Property<ushort>("ReqItemId2")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("req_item_id_2");

                    b.Property<ushort>("ReqItemId3")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("req_item_id_3");

                    b.Property<ushort>("ReqItemId4")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("req_item_id_4");

                    b.Property<uint>("ReqNpcCount1")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("req_npc_count_1");

                    b.Property<uint>("ReqNpcCount2")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("req_npc_count_2");

                    b.Property<uint>("ReqNpcCount3")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("req_npc_count_3");

                    b.Property<uint>("ReqNpcCount4")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("req_npc_count_4");

                    b.Property<ushort>("ReqNpcId1")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("req_npc_id_1");

                    b.Property<ushort>("ReqNpcId2")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("req_npc_id_2");

                    b.Property<ushort>("ReqNpcId3")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("req_npc_id_3");

                    b.Property<ushort>("ReqNpcId4")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("req_npc_id_4");

                    b.Property<ushort>("ReqQuestId1")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("req_quest_id_1");

                    b.Property<ushort>("ReqQuestId2")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("req_quest_id_2");

                    b.Property<ushort>("ReqQuestId3")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("req_quest_id_3");

                    b.Property<ushort>("ReqQuestId4")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("req_quest_id_4");

                    b.Property<uint>("RewItemCount1")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("rew_item_count_1");

                    b.Property<uint>("RewItemCount2")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("rew_item_count_2");

                    b.Property<uint>("RewItemCount3")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("rew_item_count_3");

                    b.Property<uint>("RewItemCount4")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("rew_item_count_4");

                    b.Property<ushort>("RewItemId1")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("rew_item_id_1");

                    b.Property<ushort>("RewItemId2")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("rew_item_id_2");

                    b.Property<ushort>("RewItemId3")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("rew_item_id_3");

                    b.Property<ushort>("RewItemId4")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("rew_item_id_4");

                    b.Property<ushort>("RewQuestPoints")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("rew_quest_points");

                    b.Property<uint>("RewSkillExp1")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("rew_skill_exp_1");

                    b.Property<uint>("RewSkillExp2")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("rew_skill_exp_2");

                    b.Property<uint>("RewSkillExp3")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("rew_skill_exp_3");

                    b.Property<uint>("RewSkillExp4")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("rew_skill_exp_4");

                    b.Property<byte>("RewSkillId1")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("rew_skill_id_1");

                    b.Property<byte>("RewSkillId2")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("rew_skill_id_2");

                    b.Property<byte>("RewSkillId3")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("rew_skill_id_3");

                    b.Property<byte>("RewSkillId4")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("rew_skill_id_4");

                    b.HasKey("Id");

                    b.ToTable("quests", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.ReservedName", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.HasKey("Name")
                        .HasName("PRIMARY");

                    b.ToTable("reserved_names", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Shop", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ushort>("Id"));

                    b.Property<byte>("Capacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("capacity")
                        .HasDefaultValueSql("'1'");

                    b.Property<ushort>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("currency_id")
                        .HasDefaultValueSql("'995'");

                    b.Property<byte>("GeneralStore")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("general_store");

                    b.Property<string>("MainStockItems")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("main_stock_items");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(48)
                        .HasColumnType("varchar(48)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.Property<string>("SampleStockItems")
                        .HasColumnType("longtext")
                        .HasColumnName("sample_stock_items")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SampleStockItems"), "utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("shops", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsCookingFoodDefinition", b =>
                {
                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_id");

                    b.Property<uint>("EatingTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("eating_time")
                        .HasDefaultValueSql("'3'");

                    b.Property<byte>("HealAmount")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("heal_amount");

                    b.Property<short>("LeftItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasColumnName("left_item_id")
                        .HasDefaultValueSql("'-1'");

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_cooking_food_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsCookingRawFoodDefinition", b =>
                {
                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_id");

                    b.Property<ushort>("BurntItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("burnt_item_id");

                    b.Property<ushort>("CookedItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("cooked_item_id");

                    b.Property<decimal>("Experience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("experience");

                    b.Property<byte>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<byte>("StopBurningLevel")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("stop_burning_level");

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_cooking_raw_food_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsCraftingGemDefinition", b =>
                {
                    b.Property<ushort>("ResourceId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("resource_id");

                    b.Property<short>("AnimationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasColumnName("animation_id")
                        .HasDefaultValueSql("'-1'");

                    b.Property<decimal>("Experience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("experience");

                    b.Property<ushort>("ProductId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("product_id");

                    b.Property<byte>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("ResourceId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_crafting_gem_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsCraftingJewelryDefinition", b =>
                {
                    b.Property<ushort>("ChildId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("child_id");

                    b.Property<decimal>("Experience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("experience");

                    b.Property<ushort>("ProductId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("product_id");

                    b.Property<byte>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<ushort>("ResourceId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("resource_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("enum('Amulet','Necklace','Bracelet','Ring')")
                        .HasColumnName("type");

                    b.HasKey("ChildId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_crafting_jewelry_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsCraftingLeatherDefinition", b =>
                {
                    b.Property<ushort>("ProductId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Experience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("experience");

                    b.Property<byte>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("RequiredResourceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("required_resource_count")
                        .HasDefaultValueSql("'1'");

                    b.Property<ushort>("ResourceId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("resource_id");

                    b.HasKey("ProductId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_crafting_leather_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsCraftingPotteryDefinition", b =>
                {
                    b.Property<ushort>("FormedProductId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("formed_product_id");

                    b.Property<decimal>("BakeExperience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("bake_experience");

                    b.Property<ushort>("BakedProductId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("baked_product_id");

                    b.Property<decimal>("FormExperience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("form_experience");

                    b.Property<byte>("RequiredLevel")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level");

                    b.HasKey("FormedProductId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_crafting_pottery_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsCraftingSilverDefinition", b =>
                {
                    b.Property<ushort>("ChildId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("child_id");

                    b.Property<decimal>("Experience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("experience");

                    b.Property<ushort>("MouldId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("mould_id");

                    b.Property<ushort>("ProductId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("product_id");

                    b.Property<byte>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("ChildId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_crafting_silver_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsCraftingSpinDefinition", b =>
                {
                    b.Property<ushort>("ResourceId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("resource_id");

                    b.Property<decimal>("Experience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("experience");

                    b.Property<ushort>("ProductId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("product_id");

                    b.Property<byte>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("ResourceId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_crafting_spin_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsCraftingTanDefinition", b =>
                {
                    b.Property<ushort>("ResourceId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("resource_id");

                    b.Property<ushort>("ProductId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("product_id");

                    b.Property<uint>("BasePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("base_price")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("ResourceId", "ProductId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("skills_crafting_tan_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsFarmingPatchDefinition", b =>
                {
                    b.Property<uint>("ObjectId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("object_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("enum('Herb','Tree','Bush','FruitTree','Flower','Hop','Allotment')")
                        .HasColumnName("type");

                    b.HasKey("ObjectId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_farming_patch_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsFarmingSeedDefinition", b =>
                {
                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_id");

                    b.Property<uint>("CycleTicks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("cycle_ticks")
                        .HasDefaultValueSql("'100'");

                    b.Property<decimal>("HarvestExperience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("harvest_experience");

                    b.Property<byte>("MaxCycles")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("max_cycles")
                        .HasDefaultValueSql("'4'");

                    b.Property<uint>("MaximumProductCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("maximum_product_count")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("MinimumProductCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("minimum_product_count")
                        .HasDefaultValueSql("'1'");

                    b.Property<decimal>("PlantingExperience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("planting_experience");

                    b.Property<ushort>("ProductId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("product_id");

                    b.Property<byte>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("enum('Herb','Bush','FruitTree','Flower','Hop','Tree','Allotment')")
                        .HasColumnName("type");

                    b.Property<sbyte>("VarpbitIndex")
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("varpbit_index");

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_farming_seed_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsFiremakingDefinition", b =>
                {
                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_id");

                    b.Property<decimal>("Experience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("experience");

                    b.Property<uint>("FireObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("fire_object_id")
                        .HasDefaultValueSql("'2732'");

                    b.Property<byte>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("Ticks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("ticks")
                        .HasDefaultValueSql("'100'");

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_firemaking_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsFishingFishDefinition", b =>
                {
                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_id");

                    b.Property<decimal>("Experience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("experience");

                    b.Property<decimal>("Probability")
                        .HasColumnType("decimal(11,3) unsigned")
                        .HasColumnName("probability");

                    b.Property<byte>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("SpotId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("spot_id");

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SpotId" }, "spot_id_foreign_key");

                    b.ToTable("skills_fishing_fish_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsFishingSpotDefinition", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<ushort?>("BaitId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("bait_id");

                    b.Property<decimal>("BaseCatchChance")
                        .HasPrecision(11, 3)
                        .HasColumnType("decimal(11,3)")
                        .HasColumnName("base_catch_chance");

                    b.Property<string>("ClickType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Option1Click','Option2Click','Option3Click','Option4Click','Option5Click')")
                        .HasColumnName("click_type")
                        .HasDefaultValueSql("'Option1Click'");

                    b.Property<decimal>("ExhaustChance")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("exhaust_chance");

                    b.Property<byte>("MinimumLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("minimum_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<decimal>("RespawnTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(11,2) unsigned")
                        .HasColumnName("respawn_time")
                        .HasDefaultValueSql("'1.00'");

                    b.Property<ushort>("ToolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("tool_id")
                        .HasDefaultValueSql("'309'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ToolId" }, "tool_id_foreign_key");

                    b.ToTable("skills_fishing_spot_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsFishingSpotNpcDefinition", b =>
                {
                    b.Property<uint>("SpotId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("spot_id");

                    b.Property<ushort>("NpcId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("npc_id");

                    b.HasKey("SpotId", "NpcId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("skills_fishing_spot_npc_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsFishingToolDefinition", b =>
                {
                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_id");

                    b.Property<ushort?>("CastAnimationId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("cast_animation_id");

                    b.Property<ushort>("FishAnimationId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("fish_animation_id");

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_fishing_tool_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsFletchingDefinition", b =>
                {
                    b.Property<ushort>("ResourceId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("resource_id");

                    b.Property<ushort>("AnimationId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("animation_id");

                    b.Property<string>("ProductCounts")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product_counts")
                        .HasDefaultValueSql("'1,1,1,1'");

                    b.Property<string>("ProductExperiences")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product_experiences")
                        .HasDefaultValueSql("'0,0,0,0'");

                    b.Property<string>("ProductIds")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product_ids")
                        .HasDefaultValueSql("'0,0,0,0'");

                    b.Property<string>("RequiredLevels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("required_levels")
                        .HasDefaultValueSql("'1,1,1,1'");

                    b.Property<ushort>("ToolId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("tool_id");

                    b.HasKey("ResourceId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_fletching_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsHerbloreHerbDefinition", b =>
                {
                    b.Property<ushort>("GrimyItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("grimy_item_id");

                    b.Property<ushort>("CleanItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("clean_item_id");

                    b.Property<decimal>("Experience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("experience");

                    b.Property<byte>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("GrimyItemId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_herblore_herb_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsMagicCombatDefinition", b =>
                {
                    b.Property<ushort>("ButtonId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("button_id");

                    b.Property<uint>("AutocastConfig")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("autocast_config");

                    b.Property<uint>("BaseDamage")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("base_damage");

                    b.Property<decimal>("BaseExperience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("base_experience");

                    b.Property<short>("CastAnimationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasColumnName("cast_animation_id")
                        .HasDefaultValueSql("'-1'");

                    b.Property<short>("CastGraphicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasColumnName("cast_graphic_id")
                        .HasDefaultValueSql("'-1'");

                    b.Property<short>("EndGraphicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasColumnName("end_graphic_id")
                        .HasDefaultValueSql("'-1'");

                    b.Property<short>("ProjectileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasColumnName("projectile_id")
                        .HasDefaultValueSql("'-1'");

                    b.Property<byte>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("RequiredRunes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("required_runes");

                    b.Property<string>("RequiredRunesCounts")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("required_runes_counts");

                    b.HasKey("ButtonId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_magic_combat_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsMagicEnchantDefinition", b =>
                {
                    b.Property<ushort>("ButtonId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("button_id");

                    b.Property<decimal>("Experience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("experience");

                    b.Property<ushort>("GraphicId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("graphic_id");

                    b.Property<byte>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("RequiredRunes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("required_runes");

                    b.Property<string>("RequiredRunesCounts")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("required_runes_counts");

                    b.HasKey("ButtonId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_magic_enchant_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsMagicEnchantProduct", b =>
                {
                    b.Property<ushort>("ResourceId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("resource_id");

                    b.Property<ushort>("ButtonId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("button_id");

                    b.Property<ushort>("ProductId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("product_id");

                    b.HasKey("ResourceId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ButtonId" }, "child_id_foreign_key");

                    b.ToTable("skills_magic_enchant_products", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsMagicTeleportDefinition", b =>
                {
                    b.Property<short>("ButtonId")
                        .HasColumnType("smallint")
                        .HasColumnName("button_id");

                    b.Property<string>("SpellBook")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('StandartBook','AncientBook','LunarBook','DungeoneeringBook')")
                        .HasColumnName("spell_book")
                        .HasDefaultValueSql("'StandartBook'");

                    b.Property<ushort>("CoordX")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("coord_x")
                        .HasDefaultValueSql("'3222'");

                    b.Property<ushort>("CoordY")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("coord_y")
                        .HasDefaultValueSql("'3222'");

                    b.Property<byte>("CoordZ")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("coord_z");

                    b.Property<ushort>("Distance")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("distance");

                    b.Property<decimal>("Experience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("experience");

                    b.Property<byte>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("required_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("RequiredRunes")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("required_runes")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("RequiredRunes"), "utf8mb4");

                    b.Property<string>("RequiredRunesCount")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("required_runes_count")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("RequiredRunesCount"), "utf8mb4");

                    b.HasKey("ButtonId", "SpellBook")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("skills_magic_teleport_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsMiningOreDefinition", b =>
                {
                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_id");

                    b.Property<decimal>("BaseHarvestChance")
                        .HasColumnType("decimal(11,3) unsigned")
                        .HasColumnName("base_harvest_chance");

                    b.Property<decimal>("ExhaustChance")
                        .HasColumnType("decimal(11,3) unsigned")
                        .HasColumnName("exhaust_chance");

                    b.Property<decimal>("Experience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("experience");

                    b.Property<byte>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<decimal>("RespawnTime")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(11, 3)
                        .HasColumnType("decimal(11,3)")
                        .HasColumnName("respawn_time")
                        .HasDefaultValueSql("'1.000'");

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_mining_ore_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsMiningPickaxeDefinition", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("enum('Dragon','Rune','Adamant','Mithril','Steel','Iron','Bronze')")
                        .HasColumnName("type");

                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_id");

                    b.Property<ushort>("AnimationId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("animation_id");

                    b.Property<decimal>("BaseHarvestChance")
                        .HasColumnType("decimal(11,3) unsigned")
                        .HasColumnName("base_harvest_chance");

                    b.Property<byte>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Type", "ItemId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("skills_mining_pickaxe_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsMiningRockDefinition", b =>
                {
                    b.Property<uint>("RockId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("rock_id");

                    b.Property<uint>("ExhaustRockId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("exhaust_rock_id");

                    b.Property<ushort>("OreId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("ore_id");

                    b.HasKey("RockId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OreId" }, "ore_foreign_key");

                    b.ToTable("skills_mining_rock_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsPrayerDefinition", b =>
                {
                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_id");

                    b.Property<decimal>("Experience")
                        .HasColumnType("decimal(11,2) unsigned")
                        .HasColumnName("experience");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("enum('Ashes','Bones')")
                        .HasColumnName("type");

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_prayer_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsRunecraftingDefinition", b =>
                {
                    b.Property<uint>("AltarId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("altar_id");

                    b.Property<string>("AltarLocation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("altar_location")
                        .HasDefaultValueSql("'3222,3222,0'");

                    b.Property<decimal>("Experience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("experience");

                    b.Property<string>("LevelCountMultipliers")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("level_count_multipliers")
                        .HasDefaultValueSql("'-1'");

                    b.Property<uint>("PortalId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("portal_id");

                    b.Property<byte>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("RiftId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("rift_id");

                    b.Property<string>("RiftLocation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("rift_location")
                        .HasDefaultValueSql("'3222,3222,0'");

                    b.Property<uint>("RuinId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("ruin_id");

                    b.Property<string>("RuinLocation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("ruin_location")
                        .HasDefaultValueSql("'3222,3222,0'");

                    b.Property<ushort>("RuneId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("rune_id");

                    b.Property<ushort>("TalismanId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("talisman_id");

                    b.Property<ushort>("TiaraId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("tiara_id");

                    b.HasKey("AltarId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_runecrafting_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsSlayerMasterDefinition", b =>
                {
                    b.Property<ushort>("NpcId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("npc_id");

                    b.Property<uint>("BaseSlayerRewardPoints")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("base_slayer_reward_points");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)")
                        .HasColumnName("name");

                    b.HasKey("NpcId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_slayer_master_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsSlayerTaskDefinition", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ushort>("Id"));

                    b.Property<uint>("CoinCount")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("coin_count");

                    b.Property<byte>("CombatRequirement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("combat_requirement")
                        .HasDefaultValueSql("'3'");

                    b.Property<byte>("LevelRequirement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("level_requirement")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MaximumCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(6)")
                        .HasColumnName("maximum_count")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MinimumCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("minimum_count")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NpcIds")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("npc_ids")
                        .HasComment("The NPC IDs that can be slayed for slayer experience.");

                    b.Property<ushort>("SlayerMasterId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("slayer_master_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SlayerMasterId" }, "slayer_master_foreign_key");

                    b.ToTable("skills_slayer_task_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsSummoningDefinition", b =>
                {
                    b.Property<ushort>("NpcId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("npc_id");

                    b.Property<ushort>("ConfigId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("config_id");

                    b.Property<decimal>("CreatePouchExperience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("create_pouch_experience");

                    b.Property<ushort>("PouchId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("pouch_id");

                    b.Property<decimal>("ScrollExperience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("scroll_experience");

                    b.Property<ushort>("ScrollId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("scroll_id");

                    b.Property<decimal>("SummonExperience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("summon_experience");

                    b.Property<byte>("SummonLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("summon_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<byte>("SummonSpawnCost")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("summon_spawn_cost");

                    b.Property<uint>("Ticks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("ticks")
                        .HasDefaultValueSql("'100'");

                    b.HasKey("NpcId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_summoning_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsWoodcuttingHatchetDefinition", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("enum('Bronze','Iron','Black','Steel','Mithril','Adamant','Rune','Dragon')")
                        .HasColumnName("type");

                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_id");

                    b.Property<decimal>("BaseHarvestChance")
                        .HasColumnType("decimal(11,3) unsigned")
                        .HasColumnName("base_harvest_chance");

                    b.Property<ushort>("CanoueAnimationId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("canoue_animation_id");

                    b.Property<ushort>("ChopAnimationId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("chop_animation_id");

                    b.Property<byte>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Type", "ItemId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("skills_woodcutting_hatchet_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsWoodcuttingLogDefinition", b =>
                {
                    b.Property<ushort>("ItemId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("item_id");

                    b.Property<decimal>("BaseHarvestChance")
                        .HasPrecision(11, 3)
                        .HasColumnType("decimal(11,3)")
                        .HasColumnName("base_harvest_chance");

                    b.Property<decimal>("Experience")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)")
                        .HasColumnName("experience");

                    b.Property<decimal>("FallChance")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(11, 3)
                        .HasColumnType("decimal(11,3)")
                        .HasColumnName("fall_chance")
                        .HasDefaultValueSql("'0.150'");

                    b.Property<byte>("RequiredLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level")
                        .HasDefaultValueSql("'1'");

                    b.Property<decimal>("RespawnTime")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(11, 3)
                        .HasColumnType("decimal(11,3)")
                        .HasColumnName("respawn_time")
                        .HasDefaultValueSql("'1.000'")
                        .HasComment("Respawn time in minutes");

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.ToTable("skills_woodcutting_log_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsWoodcuttingTreeDefinition", b =>
                {
                    b.Property<uint>("TreeId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("tree_id");

                    b.Property<ushort>("LogId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("log_id");

                    b.Property<uint>("StumpId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("stump_id");

                    b.HasKey("TreeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "LogId" }, "skills_woodcutting_log_id");

                    b.ToTable("skills_woodcutting_tree_definitions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8_general_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.World", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ushort>("Id"));

                    b.Property<byte>("AccountCreationEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("account_creation_enabled")
                        .HasDefaultValueSql("'1'");

                    b.Property<ushort>("Country")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("country")
                        .HasDefaultValueSql("'12'");

                    b.Property<byte>("DirectLoginEnabled")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("direct_login_enabled");

                    b.Property<byte>("GameAdminsOnly")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("game_admins_only");

                    b.Property<byte>("HighRisk")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("high_risk");

                    b.Property<byte>("Highlight")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("highlight");

                    b.Property<byte>("LobbyAdminsOnly")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("lobby_admins_only");

                    b.Property<byte>("LootShareAllowed")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("loot_share_allowed");

                    b.Property<byte>("MembersOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("members_only")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasColumnName("name");

                    b.Property<byte>("QuickChatAllowed")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("quick_chat_allowed");

                    b.Property<string>("Region")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("region")
                        .HasDefaultValueSql("'PT'");

                    b.Property<byte>("SkillReq")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("skill_req");

                    b.HasKey("Id");

                    b.ToTable("worlds", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.WorldConfiguration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id")
                        .UseCollation("latin1_swedish_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Id"), "latin1");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("world_configurations", (string)null);
                });

            modelBuilder.Entity("AspnetroleCharacter", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Aspnetrole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hagalaz.Data.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClansBan", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Clan", null)
                        .WithMany()
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("clan_id_foreign_key_3");

                    b.HasOne("Hagalaz.Data.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_18");
                });

            modelBuilder.Entity("GameobjectLootrecursion", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.GameobjectLoot", null)
                        .WithMany()
                        .HasForeignKey("GameobjectLootChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("gameobject_loot_child_id_foreign_key");

                    b.HasOne("Hagalaz.Data.Entities.GameobjectLoot", null)
                        .WithMany()
                        .HasForeignKey("GameobjectLootParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("gameobject_loot_parent_id_foreign_key");
                });

            modelBuilder.Entity("ItemLootrecursion", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.ItemLoot", null)
                        .WithMany()
                        .HasForeignKey("ItemLootChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("item_loot_table_child_id_foreign_key");

                    b.HasOne("Hagalaz.Data.Entities.ItemLoot", null)
                        .WithMany()
                        .HasForeignKey("ItemLootParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("item_loot_table_parent_id_foreign_key");
                });

            modelBuilder.Entity("NpcLootrecursion", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.NpcLoot", null)
                        .WithMany()
                        .HasForeignKey("NpcLootChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("npc_loot_child_foreign_key");

                    b.HasOne("Hagalaz.Data.Entities.NpcLoot", null)
                        .WithMany()
                        .HasForeignKey("NpcLootParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("npc_loot_parent_foreign_key");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Aspnetroleclaim", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Aspnetrole", "Role")
                        .WithMany("Aspnetroleclaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetRoleClaims_AspNetRoles_RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Aspnetuserclaim", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "User")
                        .WithMany("Aspnetuserclaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserClaims_characters_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Aspnetuserlogin", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "User")
                        .WithMany("Aspnetuserlogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserLogins_characters_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Aspnetuserrole", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Aspnetrole", "Role")
                        .WithMany("Aspnetuserroles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_AspNetRoles_RoleId");

                    b.HasOne("Hagalaz.Data.Entities.Character", "User")
                        .WithMany("Aspnetuserroles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_characters_UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Aspnetusertoken", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "User")
                        .WithMany("Aspnetusertokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserTokens_characters_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Blacklist", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.CharactersAppeal", "Appeal")
                        .WithMany("Blacklists")
                        .HasForeignKey("AppealId")
                        .IsRequired()
                        .HasConstraintName("appeal_id_foreign_key");

                    b.HasOne("Hagalaz.Data.Entities.Character", "Moderator")
                        .WithMany("Blacklists")
                        .HasForeignKey("ModeratorId")
                        .IsRequired()
                        .HasConstraintName("moderator_id_foreign_key_2");

                    b.Navigation("Appeal");

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersAppeal", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithMany("CharactersAppeals")
                        .HasForeignKey("MasterId")
                        .IsRequired()
                        .HasConstraintName("master_foreign_key");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersContact", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Contact")
                        .WithMany("CharactersContactContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("contact_id_foreign_key");

                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithMany("CharactersContactMasters")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_14");

                    b.Navigation("Contact");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersFamiliar", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.NpcDefinition", "Familiar")
                        .WithMany("CharactersFamiliars")
                        .HasForeignKey("FamiliarId")
                        .IsRequired()
                        .HasConstraintName("familiar_id_foreign_key");

                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithOne("CharactersFamiliar")
                        .HasForeignKey("Hagalaz.Data.Entities.CharactersFamiliar", "MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key");

                    b.Navigation("Familiar");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersFarmingPatch", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithMany("CharactersFarmingPatches")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_1");

                    b.HasOne("Hagalaz.Data.Entities.SkillsFarmingPatchDefinition", "Patch")
                        .WithMany("CharactersFarmingPatches")
                        .HasForeignKey("PatchId")
                        .IsRequired()
                        .HasConstraintName("farming_patch_foreign_key");

                    b.HasOne("Hagalaz.Data.Entities.SkillsFarmingSeedDefinition", "Seed")
                        .WithMany("CharactersFarmingPatches")
                        .HasForeignKey("SeedId")
                        .IsRequired()
                        .HasConstraintName("seed_id_foreign_key");

                    b.Navigation("Master");

                    b.Navigation("Patch");

                    b.Navigation("Seed");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersItem", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithMany("CharactersItems")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_15");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersItemsLook", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithMany("CharactersItemsLooks")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_2");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersLook", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithOne("CharactersLook")
                        .HasForeignKey("Hagalaz.Data.Entities.CharactersLook", "MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_13");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersMusic", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithOne("CharactersMusic")
                        .HasForeignKey("Hagalaz.Data.Entities.CharactersMusic", "MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_3");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersMusicPlaylist", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithOne("CharactersMusicPlaylist")
                        .HasForeignKey("Hagalaz.Data.Entities.CharactersMusicPlaylist", "MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_4");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersNote", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithMany("CharactersNotes")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_6");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersOffence", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithMany("CharactersOffenceMasters")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_5");

                    b.HasOne("Hagalaz.Data.Entities.Character", "Moderator")
                        .WithMany("CharactersOffenceModerators")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("moderator_id_foreign_key");

                    b.Navigation("Master");

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersPermission", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithMany("CharactersPermissions")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_7");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersProfile", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithOne("CharacterProfile")
                        .HasForeignKey("Hagalaz.Data.Entities.CharactersProfile", "MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersQuest", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithOne("CharactersQuest")
                        .HasForeignKey("Hagalaz.Data.Entities.CharactersQuest", "MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_8");

                    b.HasOne("Hagalaz.Data.Entities.Quest", "Quest")
                        .WithMany("CharactersQuests")
                        .HasForeignKey("QuestId")
                        .IsRequired()
                        .HasConstraintName("quest_id_foreign_key");

                    b.Navigation("Master");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersReport", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Reported")
                        .WithMany("CharactersReportReporteds")
                        .HasForeignKey("ReportedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reported_id_foreign_key");

                    b.HasOne("Hagalaz.Data.Entities.Character", "Reporter")
                        .WithMany("CharactersReportReporters")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reporter_id_foreign_key");

                    b.Navigation("Reported");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersReward", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithMany("CharactersRewards")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_10");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersSlayerTask", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithOne("CharactersSlayerTask")
                        .HasForeignKey("Hagalaz.Data.Entities.CharactersSlayerTask", "MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_16");

                    b.HasOne("Hagalaz.Data.Entities.SkillsSlayerTaskDefinition", "SlayerTask")
                        .WithMany("CharactersSlayerTasks")
                        .HasForeignKey("SlayerTaskId")
                        .IsRequired()
                        .HasConstraintName("slayer_task_id_foreign_key");

                    b.Navigation("Master");

                    b.Navigation("SlayerTask");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersState", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithMany("CharactersStates")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_17");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersStatistic", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithOne("CharactersStatistic")
                        .HasForeignKey("Hagalaz.Data.Entities.CharactersStatistic", "MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_11");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.ClansMember", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Clan", "Clan")
                        .WithMany("ClansMembers")
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("clan_id_foreign_key_46");

                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithOne("ClansMemberMaster")
                        .HasForeignKey("Hagalaz.Data.Entities.ClansMember", "MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_19");

                    b.HasOne("Hagalaz.Data.Entities.Character", "Recruiter")
                        .WithMany("ClansMemberRecruiters")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("recruiter_id_foreign_key");

                    b.Navigation("Clan");

                    b.Navigation("Master");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.ClansSetting", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Clan", "Clan")
                        .WithOne("ClansSetting")
                        .HasForeignKey("Hagalaz.Data.Entities.ClansSetting", "ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("clan_id_foreign_key_6");

                    b.Navigation("Clan");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.GameobjectDefinition", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.GameobjectLoot", "GameobjectLoot")
                        .WithMany("GameobjectDefinitions")
                        .HasForeignKey("GameobjectLootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("gameobject_loot_id_foreign_key");

                    b.Navigation("GameobjectLoot");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.GameobjectLootItem", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.GameobjectLoot", "GameobjectLoot")
                        .WithMany("GameobjectLootItems")
                        .HasForeignKey("GameobjectLootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("gameobject_loot_id_foreign_key_1");

                    b.Navigation("GameobjectLoot");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.ItemLootItem", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.ItemLoot", "ItemLoot")
                        .WithMany("ItemLootItems")
                        .HasForeignKey("ItemLootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("item_loot_id_foreign_key");

                    b.Navigation("ItemLoot");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.MinigamesBarrow", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithOne("MinigamesBarrow")
                        .HasForeignKey("Hagalaz.Data.Entities.MinigamesBarrow", "MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_20");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.MinigamesDuelArena", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithOne("MinigamesDuelArena")
                        .HasForeignKey("Hagalaz.Data.Entities.MinigamesDuelArena", "MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_21");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.MinigamesGodwar", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithOne("MinigamesGodwar")
                        .HasForeignKey("Hagalaz.Data.Entities.MinigamesGodwar", "MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_22");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.MinigamesTzhaarCave", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.Character", "Master")
                        .WithOne("MinigamesTzhaarCave")
                        .HasForeignKey("Hagalaz.Data.Entities.MinigamesTzhaarCave", "MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("master_id_foreign_key_23");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.MusicLocation", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.MusicDefinition", "Music")
                        .WithMany("MusicLocations")
                        .HasForeignKey("MusicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("music_id_foreign_key");

                    b.Navigation("Music");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.NpcDefinition", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.NpcLoot", "NpcLoot")
                        .WithMany("NpcDefinitionNpcLoots")
                        .HasForeignKey("NpcLootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("npc_loot_id_foreign_key");

                    b.HasOne("Hagalaz.Data.Entities.NpcLoot", "NpcPickpocketingLoot")
                        .WithMany("NpcDefinitionNpcPickpocketingLoots")
                        .HasForeignKey("NpcPickpocketingLootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("npc_pickpocket_loot_id_foreign_key");

                    b.Navigation("NpcLoot");

                    b.Navigation("NpcPickpocketingLoot");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.NpcLootItem", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.NpcLoot", "NpcLoot")
                        .WithMany("NpcLootItems")
                        .HasForeignKey("NpcLootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("npc_loot_id_foreign_key_1");

                    b.Navigation("NpcLoot");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsFishingFishDefinition", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.SkillsFishingSpotDefinition", "Spot")
                        .WithMany("SkillsFishingFishDefinitions")
                        .HasForeignKey("SpotId")
                        .IsRequired()
                        .HasConstraintName("spot_id_foreign_key");

                    b.Navigation("Spot");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsFishingSpotDefinition", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.SkillsFishingToolDefinition", "Tool")
                        .WithMany("SkillsFishingSpotDefinitions")
                        .HasForeignKey("ToolId")
                        .IsRequired()
                        .HasConstraintName("tool_id_foreign_key");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsFishingSpotNpcDefinition", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.SkillsFishingSpotDefinition", "Spot")
                        .WithMany("SkillsFishingSpotNpcDefinitions")
                        .HasForeignKey("SpotId")
                        .IsRequired()
                        .HasConstraintName("spot_id_foreign_key_11");

                    b.Navigation("Spot");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsMagicEnchantProduct", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.SkillsMagicEnchantDefinition", "Button")
                        .WithMany("SkillsMagicEnchantProducts")
                        .HasForeignKey("ButtonId")
                        .IsRequired()
                        .HasConstraintName("skills_magic_enchant_products_ibfk_1");

                    b.Navigation("Button");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsMiningRockDefinition", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.SkillsMiningOreDefinition", "Ore")
                        .WithMany("SkillsMiningRockDefinitions")
                        .HasForeignKey("OreId")
                        .IsRequired()
                        .HasConstraintName("skills_mining_rock_definitions_ibfk_1");

                    b.HasOne("Hagalaz.Data.Entities.GameobjectDefinition", "Rock")
                        .WithOne("SkillsMiningRockDefinition")
                        .HasForeignKey("Hagalaz.Data.Entities.SkillsMiningRockDefinition", "RockId")
                        .IsRequired()
                        .HasConstraintName("rock_id_foreign_key");

                    b.Navigation("Ore");

                    b.Navigation("Rock");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsSlayerTaskDefinition", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.SkillsSlayerMasterDefinition", "SlayerMaster")
                        .WithMany("SkillsSlayerTaskDefinitions")
                        .HasForeignKey("SlayerMasterId")
                        .IsRequired()
                        .HasConstraintName("slayer_master_foreign_key");

                    b.Navigation("SlayerMaster");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsWoodcuttingTreeDefinition", b =>
                {
                    b.HasOne("Hagalaz.Data.Entities.SkillsWoodcuttingLogDefinition", "Log")
                        .WithMany("SkillsWoodcuttingTreeDefinitions")
                        .HasForeignKey("LogId")
                        .IsRequired()
                        .HasConstraintName("skills_woodcutting_log_id");

                    b.HasOne("Hagalaz.Data.Entities.GameobjectDefinition", "Tree")
                        .WithOne("SkillsWoodcuttingTreeDefinition")
                        .HasForeignKey("Hagalaz.Data.Entities.SkillsWoodcuttingTreeDefinition", "TreeId")
                        .IsRequired()
                        .HasConstraintName("skills_woodcutting_tree_id");

                    b.Navigation("Log");

                    b.Navigation("Tree");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Aspnetrole", b =>
                {
                    b.Navigation("Aspnetroleclaims");

                    b.Navigation("Aspnetuserroles");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Character", b =>
                {
                    b.Navigation("Aspnetuserclaims");

                    b.Navigation("Aspnetuserlogins");

                    b.Navigation("Aspnetuserroles");

                    b.Navigation("Aspnetusertokens");

                    b.Navigation("Blacklists");

                    b.Navigation("CharacterProfile")
                        .IsRequired();

                    b.Navigation("CharactersAppeals");

                    b.Navigation("CharactersContactContacts");

                    b.Navigation("CharactersContactMasters");

                    b.Navigation("CharactersFamiliar")
                        .IsRequired();

                    b.Navigation("CharactersFarmingPatches");

                    b.Navigation("CharactersItems");

                    b.Navigation("CharactersItemsLooks");

                    b.Navigation("CharactersLook")
                        .IsRequired();

                    b.Navigation("CharactersMusic")
                        .IsRequired();

                    b.Navigation("CharactersMusicPlaylist")
                        .IsRequired();

                    b.Navigation("CharactersNotes");

                    b.Navigation("CharactersOffenceMasters");

                    b.Navigation("CharactersOffenceModerators");

                    b.Navigation("CharactersPermissions");

                    b.Navigation("CharactersQuest")
                        .IsRequired();

                    b.Navigation("CharactersReportReporteds");

                    b.Navigation("CharactersReportReporters");

                    b.Navigation("CharactersRewards");

                    b.Navigation("CharactersSlayerTask")
                        .IsRequired();

                    b.Navigation("CharactersStates");

                    b.Navigation("CharactersStatistic")
                        .IsRequired();

                    b.Navigation("ClansMemberMaster")
                        .IsRequired();

                    b.Navigation("ClansMemberRecruiters");

                    b.Navigation("MinigamesBarrow")
                        .IsRequired();

                    b.Navigation("MinigamesDuelArena")
                        .IsRequired();

                    b.Navigation("MinigamesGodwar")
                        .IsRequired();

                    b.Navigation("MinigamesTzhaarCave")
                        .IsRequired();
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.CharactersAppeal", b =>
                {
                    b.Navigation("Blacklists");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Clan", b =>
                {
                    b.Navigation("ClansMembers");

                    b.Navigation("ClansSetting")
                        .IsRequired();
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.GameobjectDefinition", b =>
                {
                    b.Navigation("SkillsMiningRockDefinition")
                        .IsRequired();

                    b.Navigation("SkillsWoodcuttingTreeDefinition")
                        .IsRequired();
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.GameobjectLoot", b =>
                {
                    b.Navigation("GameobjectDefinitions");

                    b.Navigation("GameobjectLootItems");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.ItemLoot", b =>
                {
                    b.Navigation("ItemLootItems");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.MusicDefinition", b =>
                {
                    b.Navigation("MusicLocations");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.NpcDefinition", b =>
                {
                    b.Navigation("CharactersFamiliars");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.NpcLoot", b =>
                {
                    b.Navigation("NpcDefinitionNpcLoots");

                    b.Navigation("NpcDefinitionNpcPickpocketingLoots");

                    b.Navigation("NpcLootItems");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.Quest", b =>
                {
                    b.Navigation("CharactersQuests");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsFarmingPatchDefinition", b =>
                {
                    b.Navigation("CharactersFarmingPatches");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsFarmingSeedDefinition", b =>
                {
                    b.Navigation("CharactersFarmingPatches");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsFishingSpotDefinition", b =>
                {
                    b.Navigation("SkillsFishingFishDefinitions");

                    b.Navigation("SkillsFishingSpotNpcDefinitions");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsFishingToolDefinition", b =>
                {
                    b.Navigation("SkillsFishingSpotDefinitions");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsMagicEnchantDefinition", b =>
                {
                    b.Navigation("SkillsMagicEnchantProducts");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsMiningOreDefinition", b =>
                {
                    b.Navigation("SkillsMiningRockDefinitions");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsSlayerMasterDefinition", b =>
                {
                    b.Navigation("SkillsSlayerTaskDefinitions");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsSlayerTaskDefinition", b =>
                {
                    b.Navigation("CharactersSlayerTasks");
                });

            modelBuilder.Entity("Hagalaz.Data.Entities.SkillsWoodcuttingLogDefinition", b =>
                {
                    b.Navigation("SkillsWoodcuttingTreeDefinitions");
                });
#pragma warning restore 612, 618
        }
    }
}
